#version 450

// Define the local workgroup size. 16x16 = 256 threads per workgroup.
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Define the storage image that the shader will write to.
// It's bound to set 0, binding 0. 'rgba8' specifies the format.
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D resultImage;

void main() {
    // Get the pixel coordinate for this shader invocation.
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

    // Get the dimensions of the image from the image itself.
    ivec2 size = imageSize(resultImage);

    // Boundary check to prevent writing outside the image dimensions.
    if (storePos.x >= size.x || storePos.y >= size.y) {
        return;
    }

    // Calculate a color based on the pixel's normalized coordinates.
    float r = float(storePos.x) / float(size.x - 1);
    float g = float(storePos.y) / float(size.y - 1);
    float b = 0.25; // A constant blue component.
    
    // Write the calculated color to the image.
    imageStore(resultImage, storePos, vec4(r, g, b, 1.0));
}
